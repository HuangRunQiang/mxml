.SH 包含文件
```c
#include <mxml.h>
```

.SH 库
```c
-lmxml
```

.SH 描述
Mini-XML 是一个小型的 XML 解析库，您可以在应用程序中使用它来读取 XML 和类 XML 数据文件，而无需使用大型非标准库。Mini-XML 只需要 ANSI C 兼容的编译器（如 GCC，大多数厂商的 ANSI C 编译器也可以），以及一个 "make" 程序。

Mini-XML 提供以下功能：
- 读取 UTF-8 和 UTF-16，以及编写 UTF-8 编码的 XML 文件和字符串。
- 数据存储在链表树结构中，保留了 XML 数据的层次结构。
- 支持任意元素名称、属性和属性值，没有预设限制，只受可用内存限制。
- 在 "叶子" 节点中支持整数、实数、不透明 ("CDATA") 和文本数据类型。
- 提供创建、索引和管理数据树的函数。
- 提供用于轻松定位和导航数据树的 "查找" 和 "遍历" 函数。

Mini-XML 不对数据进行基于模式文件或其他定义信息源的验证或其他类型的处理，也不支持除 XML 规范所需的字符实体之外的字符实体。

.SH 使用 Mini-XML
Mini-XML 提供一个头文件，您可以包含它：
```c
#include <mxml.h>
```

节点由 "mxml_node_t" 结构定义；"type" 成员定义了节点类型（元素、整数、不透明、实数或文本），这决定了您想要在 "value" 联合体中查看的值。可以使用 "mxmlNewElement()"、"mxmlNewInteger()"、"mxmlNewOpaque()"、"mxmlNewReal()" 和 "mxmlNewText()" 函数创建新节点。只有元素可以有子节点，顶级节点必须是一个元素，通常是 "?xml"。

您可以使用 "mxmlLoadFile()" 函数加载 XML 文件：
```c
FILE *fp;
mxml_node_t *tree;

fp = fopen("filename.xml", "r");
tree = mxmlLoadFile(NULL, fp, MXML_NO_CALLBACK);
fclose(fp);
```

类似地，您可以使用 "mxmlSaveFile()" 函数保存 XML 文件：
```c
FILE *fp;
mxml_node_t *tree;

fp = fopen("filename.xml", "w");
mxmlSaveFile(tree, fp, MXML_NO_CALLBACK);
fclose(fp);
```

"mxmlLoadString()"、"mxmlSaveAllocString()" 和 "mxmlSaveString()" 函数从字符串加载 XML 节点树并保存 XML 节点树：
```c
char buffer[8192];
char *ptr;
mxml_node_t *tree;

...
tree = mxmlLoadString(NULL, buffer, MXML_NO_CALLBACK);

...
mxmlSaveString(tree, buffer, sizeof(buffer), MXML_NO_CALLBACK);

...
ptr = mxmlSaveAllocString(tree, MXML_NO_CALLBACK);
```

您可以使用 "mxmlFindElement()" 函数查找命名的元素/节点：
```c
mxml_node_t *node = mxmlFindElement(tree, tree, "name", "attr", "value", MXML_DESCEND);
```

"mxmlFindElement()" 函数的 "name"、"attr" 和 "value" 参数可以传递为 NULL 作为通配符，例如：
```c
/* 查找第一个 "a" 元素 */
node = mxmlFindElement(tree, tree, "a", NULL, NULL, MXML_DESCEND);

/* 查找具有 "href" 属性的第一个 "a" 元素 */
node = mxmlFindElement(tree, tree, "a", "href", NULL, MXML_DESCEND);

/* 查找具有指向 URL 的 "href" 的第一个 "a" 元素 */
node = mxmlFindElement(tree, tree, "a", "href", "http://www.easysw.com/~mike/mxml/", MXML_DESCEND);

/* 查找具有 "src" 属性的第一个元素 */
node = mxmlFindElement(tree, tree, NULL, "src", NULL, MXML_DESCEND);

/* 查找具有 "src" = "foo.jpg" 的第一个元素 */
node = mxmlFindElement(tree, tree, NULL, "src", "foo.jpg", MXML_DESCEND);
```

您还可以使用相同的函数进行迭代：
```c
mxml_node_t *node;

for (node = mxmlFindElement(tree, tree, "name", NULL, NULL, MXML_DESCEND);
     node != NULL;
     node = mxmlFindElement(node, tree, "name", NULL, NULL, MXML_DESCEND))
{
  ... 进行某些操作 ...
}
```

要查找树中特定节点的值，请使用 "mxmlFindPath()" 函数：
```c
mxml_node_t *value = mxmlFindPath(tree, "path/to/*/foo/bar");
```

"mxmlGetInteger()"、"mxmlGetOpaque()"、"mxmlGetReal()" 和 "mxmlGetText()" 函数从节点中检索值：
```c
mxml_node_t *node;

long intvalue = mxmlGetInteger(node);

const char *opaquevalue = mxmlGetOpaque(node);

double realvalue = mxmlGetReal(node);

bool whitespacevalue;
const char *textvalue = mxmlGetText(node, &whitespacevalue);
```

最后，当您完成对 XML 数据的操作时，请使用 "mxmlDelete()" 函数递归地释放用于特定节点或整个树的内存：
```c
mxmlDelete(tree);
```